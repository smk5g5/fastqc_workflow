#!/usr/bin/env python

from AutoADAG import *
import ConfigParser
from Pegasus.DAX3 import *
import getpass
import logging
import math
import optparse
import os
import re
import socket
import string
import subprocess
import sys
import time



# to setup python lib dir for importing Pegasus PYTHON DAX API
pegasus_config = os.path.join("pegasus-config") + " --noeoln --python"
lib_dir = subprocess.Popen(pegasus_config,
                           stdout=subprocess.PIPE,
                           shell=True).communicate()[0]
#Insert this directory in our search path
os.sys.path.insert(0, lib_dir)


# --- global variables ----------------------------------------------------------------

logger      = logging.getLogger("my_logger")
conf        = None
added_execs = []


# --- classes -------------------------------------------------------------------------

class ComputeJob(Job):
    """ A Pegasus DAX Job with extra information such as cpu and memory
    requirements, for both single and peagaus-mpi-cluster execution
    """

    def __init__(self, name, cores=1, mem_gb=2, partition="part1"):
        Job.__init__(self, name=name)
        
        # label based clustering
        self.addProfile(Profile(Namespace.PEGASUS, 
                                key="label",
                                value=partition))
  
        # required for the Pegasus accounting
        self.addProfile(Profile(Namespace.PEGASUS,
                                key="cores",
                                value=str(cores)))
  
        # standard resource requirements for all jobs
        mem_mb = mem_gb * 1000
        self.addProfile(Profile(Namespace.CONDOR,
                                key="request_cpus",
                                value=str(cores)))
        self.addProfile(Profile(Namespace.PEGASUS,
                                key="pmc_request_cpus",
                                value=str(cores)))
        self.addProfile(Profile(Namespace.CONDOR,
                                key="request_memory",
                                value=str(mem_mb)))
        self.addProfile(Profile(Namespace.PEGASUS,
                                key="pmc_request_memory",
                                value=str(mem_mb)))
        self.addProfile(Profile(Namespace.CONDOR,
                                key="request_disk",
                                value=str(20*1024*1024)))

        # special sauce for TACC - we want smaller jobs to go to the normal
        # compute nodes and the large memory ones to go to the large memory
        # nodes
        if re.search('stampede', conf.get("local", "exec_env")):
            hosts = conf.get("exec_environment", "hosts_" + partition)
            cores = str(16 * int(hosts))
            self.addProfile(Profile(Namespace.GLOBUS,
                                    key="queue",
                                    value="normal"))
            self.addProfile(Profile(Namespace.GLOBUS,
                                    key="hostcount",
                                    value=hosts))
            self.addProfile(Profile(Namespace.GLOBUS,
                                    key="count",
                                    value=cores))
            self.addProfile(Profile(Namespace.ENV,
                                    key="PMC_HOST_MEMORY",
                                    value="29000"))


# --- functions -----------------------------------------------------------------------


def setup_logger(verbose):
    """ Use a console logger for all output to the user """

    # log to the console
    console = logging.StreamHandler()

    # default log level - make logger/console match
    logger.setLevel(logging.INFO)
    console.setLevel(logging.INFO)

    if verbose:
        logger.setLevel(logging.DEBUG)
        console.setLevel(logging.DEBUG)

    # formatter
    formatter = logging.Formatter("%(asctime)s %(levelname)7s:  %(message)s")
    console.setFormatter(formatter)
    logger.addHandler(console)
    logger.debug("Logger has been configured")


def myexec(cmd_line):
    """ Convenience function as we are shelling out a fair amount """
    
    sys.stdout.flush()
    p = subprocess.Popen(cmd_line + " 2>&1", shell=True)
    stdoutdata, stderrdata = p.communicate()
    r = p.returncode
    if r != 0:
        raise RuntimeError("Command '%s' failed with error code %s" \
                           % (cmd_line, r))


def proxy_check():
    """ Verify that the user has a proxy and it is valid for a long time """
    p = subprocess.Popen("grid-proxy-info -timeleft", shell=True, 
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdoutdata, stderrdata = p.communicate()
    r = p.returncode
    if r != 0:
        logger.error(stderrdata)
        raise RuntimeError("Command '%s' failed with error code %s" \
                           % (cmd_line, r))
    timeleft = int(stdoutdata)

    # two weeks minimum lifetime
    if timeleft < (60*60*24*10):
        raise RuntimeError("There is not enough time left on your grid" +
                           " proxy. Please renew, then run this command" +
                           " again")

        
def generate_site_catalog():
    """ Uses a templete file to produce the Pegasus site catalog """
    
    logger.info("Generating sites.catalog")
    inf = open("conf/" + conf.get("local", "exec_env") + 
               "/sites.catalog.template", 'r')
    template = string.Template(inf.read())
    inf.close()

    outf = open(conf.get("local", "work_dir") + "/sites.catalog", "w")
    outf.write(template.substitute(
                        submit_host = socket.gethostname(),
                        username = getpass.getuser(), 
                        home = os.path.expanduser('~'),
                        top_dir = conf.get("local", "top_dir"),
                        work_dir = conf.get("local", "work_dir"),
                        pegasus_bin = conf.get("local", "pegasus_bin"),
                        irods_bin = conf.get("local", "irods_bin")))
    outf.close()
   

def read_input_lists(fastq_urls):
    """ The user provides a list of reference file URLs and pairs of fastq 
    URLs to be processed.
    """
    inf = open(conf.get("local", "top_dir") + "/inputs-fastq.txt", "r")
    for line in inf.readlines():
        line = line.rstrip('\n')
        line = line.rstrip('\r')
        fastq_urls.append(line)
    inf.close()

    # sanity checks
    if len(fastq_urls) == 0:
        logger.error("Did not find fastq files")
        sys.exit(1)

def extract_lfn(url):
    """ determine a logical file name (basename) from a given URL """
    return re.sub(".*/", "", url)


def local_pfn(path):
    """ generates a full pfn given a local path """
    pfn = "scp://" + getpass.getuser() + "@" + socket.gethostname() + "/" + path
    return pfn
  

def extract_sample_name(url):
    """ sample name is the fist part of the base name (for example:
    HN0001 from HN001_FCD1P1JACXX_L6_SZAIPI024836-36_1.fq)
    """
    name = re.sub(".*/", "", url)
    name = re.sub("_.*", "", name)
    return name

def add_executable(dax, logical_name, wrapper_name):
    """ adds executables to the DAX-level replica catalog """
    global added_execs

    if logical_name in added_execs:
        return

    base_url = local_pfn(conf.get("local", "top_dir"))    
    
    wrapper = Executable(name=logical_name, 
                         arch="x86_64",
                         installed=False)
    wrapper.addPFN(PFN(base_url + "/wrappers/" + wrapper_name, "local"))
    dax.addExecutable(wrapper)

    added_execs.append(logical_name)

def run_fastqc(sample_name, dax, software_tar,wf_files):
    
    # Note that the cores we give Pegasus and the -t does not match. 
    # Oversubscriptions is ok, as bwa can not keep all the cores busy 100%
    # of the time.
    add_executable(dax, "Fastqc", "fastqc_wrapper")
    j = ComputeJob("Fastqc",)
    
    # determine which is the fasta file
    j.uses(software_tar, link=Link.INPUT)
    j.uses(wf_files['fastq_file'], link=Link.INPUT)
    j.uses(wf_files['zip'], link=Link.OUTPUT, transfer=True)
    j.addArguments("--noextract",wf_files['fastq_file'])
    dax.addJob(j)

    return j


def summarize_fastqc(dax,software_file,wf_files,sample_names):
    add_executable(dax, "summarize_fastqc", "summary_wrapper")
    j = ComputeJob("summarize_fastqc")
    j.uses(software_file, link=Link.INPUT)
    files = []
    for s in sample_names:
        j.uses(s,link=Link.INPUT)
        j.addArguments(s)
    fname = conf.get("local", "run_id") + "_summary.txt"
    wf_files[fname] = File(fname)
    j.uses(wf_files[fname], link=Link.OUTPUT, transfer=True)
    j.addArguments(wf_files[fname])
    dax.addJob(j)

    
def generate_dax():
    """ generates the Pegasus DAX (directed acyclic graph - abstract XML)
    which is a description of a workflow """
    
    logger.info("Generating abstract workflow (DAX)")
    
    dax = AutoADAG("soykb")
    
    # The key to adding jobs to this workflow is the AutoADAG - it allows you
    # to add jobs with listed input and output files, and then the AutoADAG
    # will figure out the relationships between the jobs. There is no need
    # to list parent/child relationships, but you can do that if you feel it
    # makes the relationships more clear than just specifying the
    # inputs/outputs.
        
    # email notificiations for when the state of the workflow changes
    dax.invoke('all',  conf.get("local", "pegasus_bin") +
                       "/../share/pegasus/notification/email")
    
    fastq_urls = []
    read_input_lists(fastq_urls)
    # determine how many TACC compute nodes we need
    num_inputs_in_set = min(len(fastq_urls) / 2, 100)
    conf.set("exec_environment", "hosts_part1", str( (num_inputs_in_set // 16 + 1) * 4 ))
    conf.set("exec_environment", "hosts_part2", str( (num_inputs_in_set // 16 + 1) * 4 ))
    conf.set("exec_environment", "hosts_part3", str( 1 ))

    # we need to bring a copy of the software with us
    software_tar = File("software.tar.gz")
    software_tar.addPFN(PFN(local_pfn(conf.get("local", "work_dir") + "/software.tar.gz"), "local"))
    dax.addFile(software_tar)    
    add_executable(dax, "software-wrapper", "software-wrapper")
    software_job = ComputeJob("software-wrapper", cores=1, mem_gb=1)
    software_job.uses(software_tar, link=Link.INPUT)
    dax.addJob(software_job)

    # we need to track files across jobs
    wf_files = {}
    sample_names = []
    
    for lane in range(len(fastq_urls)):

        # input files for this lane   
        wf_files['fastq_file'] = File(extract_lfn(fastq_urls[lane]))
        wf_files['fastq_file'].addPFN(PFN(fastq_urls[lane], "irods_iplant"))
        dax.addFile(wf_files['fastq_file'])
	# handle the different line endings
        output_name = wf_files['fastq_file'].name
        output_name = re.sub("\.(fastq\.gz|fq\.gz|fastq|fq)$", "_fastqc.zip", output_name)
        wf_files['zip'] = File(output_name)

	logger.info("  Added input file %s with output file %s" %(wf_files['fastq_file'].name, wf_files['zip'].name))
        
        # Step 1 - dependent jobs are now added in the parent jobs
        fastqc_job = run_fastqc(output_name,dax,software_tar,wf_files)
        dax.depends(parent=software_job, child=fastqc_job)
        sample_names.append(output_name)
    summarize_fastqc(dax,software_tar,wf_files,sample_names)
    # write out the dax
    dax_file = open(conf.get("local", "work_dir") + "/fastqc.dax", "w")
    dax.writeXML(dax_file)
    dax_file.close()


def main():
    global conf
    
    setup_logger(False)

    # Configure command line option parser
    prog_usage = "usage: workflow-generator [options]"
    parser = optparse.OptionParser(usage=prog_usage)

    parser.add_option("-e", "--exec-env", action = "store", dest = "exec_env",
                      help = "Handle for the target execution environment.")

    # Parse command line options
    (options, args) = parser.parse_args()
    if options.exec_env == None:
        logger.fatal("Please specify an execution environment with --exec-env")
        sys.exit(1)

    # read the config file and add those settings to the option object
    conf = ConfigParser.SafeConfigParser({'username': getpass.getuser()})
    r = conf.read([os.environ['HOME'] + "/.soybean-workflow.conf", \
                  "conf/%s/site.conf" % options.exec_env])
    if len(r) != 2:
        logger.fatal("Unable to read configuration files for that environment")
        sys.exit(1)

    conf.set("local", "username", getpass.getuser())
    conf.set("local", "exec_env", options.exec_env)
    conf.set("local", "top_dir", os.path.dirname(os.path.realpath( __file__ )))

    # run id
    conf.set("local", "run_id", time.strftime("%Y%m%d-%H%M%S", time.gmtime()))

    # add the run id to the work dir
    conf.set("local", "work_dir", conf.get("local", "work_dir") + "/" + 
                                  conf.get("local", "run_id"))
    
    # local Pegasus environment
    pegasus_config = os.path.join("pegasus-config") + " --noeoln --bin"
    pegasus_bin_dir = subprocess.Popen(pegasus_config,
                                       stdout=subprocess.PIPE,
                                       shell=True).communicate()[0]
    conf.set("local", "pegasus_bin", pegasus_bin_dir)

    # check proxy before doing anything else
    proxy_check()
    
    # create a local work directory for the workflow
    logger.info("Setting up work directory at %s" \
                %(conf.get("local", "work_dir")))
    if os.path.exists(conf.get("local", "work_dir")):
        logger.fatal("Work directory already exists") 
        os.exit(1)
    os.makedirs(conf.get("local", "work_dir"))

    # tar up the software
    logger.info("Tarring up software directory to send with jobs")
    myexec("tar czf " + conf.get("local", "work_dir") + \
           "/software.tar.gz software")

    generate_site_catalog()

    # FIXME: what should we copy / keep in the top dir?
    myexec("cp conf/" + conf.get("local", "exec_env") + 
           "/transformations.catalog " + 
           conf.get("local", "work_dir") + "/transformations.catalog")
    myexec("cp conf/" + conf.get("local", "exec_env") + 
           "/replica.catalog " + 
           conf.get("local", "work_dir") + "/replica.catalog")

    generate_dax()

    # submit
    logger.info("Planning workflow...")
    os.chdir(conf.get("local", "work_dir"))
    cmd = "pegasus-plan" + \
          " --conf " + conf.get("local", "top_dir") + \
          "/conf/" + conf.get("local", "exec_env") + "/pegasus.conf" + \
          " --dir ." + \
          " --relative-dir wf-" + conf.get("local", "run_id") + \
          " --sites execution"
    
    if conf.get("exec_environment", "output_site") != "":
        cmd += " --output-site " + conf.get("exec_environment", "output_site")
              
    if conf.get("exec_environment", "staging_site") != "":
        cmd += " --staging " + conf.get("exec_environment", "staging_site")
          
    if conf.get("exec_environment", "job_clustering") != "":
        cmd += " --cluster " + conf.get("exec_environment", "job_clustering")
          
    cmd += " --dax fastqc.dax"
    logger.info(cmd)
    myexec(cmd + " 2>&1 | tee pegasus-plan.out")


if __name__ == "__main__":
    main()
